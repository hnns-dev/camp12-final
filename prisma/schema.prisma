// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                 String    @id
  googleId           String?   @unique
  email              String    @unique
  name               String?
  picture            String?
  session            Session[]
  meetsCreated       Meet[]    @relation("CreatedMeets")
  meetsParticipating Meet[]    @relation("ParticipatedMeets")
  badges             Badge[]
  bio                String?
  friends            User[]    @relation("Friends")
  friendOf           User[]    @relation("Friends")
  settings           Settings?
  checkIns           CheckIn[]
  city               City?     @relation(fields: [cityName], references: [name])
  cityName           String?
}

model Badge {
  name        String   @id @unique
  icon        String?
  description String?
  users       User[]
  createdAt   DateTime @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Tag {
  // A name as identifier is totally fine. only if you want to have two tags with the same name butt different attributes, you need an id
  name          String         @id @default(uuid())
  venues        Venue[]
  meets         Meet[]
  activityTypes ActivityType[]
}

model Venue {
  id            String         @id @default(uuid())
  name          String         @unique
  location      Float[]
  image         String?
  address       String?
  description   String?
  tags          Tag[]
  meets         Meet[]
  activityTypes ActivityType[]
  reports       Report[]
}

model Meet {
  id             String       @id @default(uuid())
  date           DateTime
  time           String
  mode           String
  isRecurring    Boolean      @default(false)
  duration       Float
  isPublic       Boolean      @default(false)
  creatorId      String
  creator        User         @relation("CreatedMeets", fields: [creatorId], references: [id], onDelete: Cascade)
  participants   User[]       @relation("ParticipatedMeets")
  guests         String[]     @default([])
  groupSize      Int
  notes          String?
  equipment      String?
  venue          Venue?       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId        String?
  location       Float[]
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
  competitive    Boolean?
  tags           Tag[]
  address        String?
}

model CheckIn {
  id             String       @id @default(uuid())
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
  time           DateTime     @default(now())
  duration       Float
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  venueId        String
}

model ActivityType {
  id                           String  @id @default(uuid())
  name                         String  @unique
  description                  String?
  requiredNumberOfParticipants Int
  meets                        Meet[]
  tags                         Tag[]
  venues                       Venue[]

  CheckIn CheckIn[]
}

enum VisibilityStatus {
  Public
  FriendsOnly
  Private
}

model Settings {
  friendsVisibility VisibilityStatus
  profileVisibility VisibilityStatus
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @unique
}

model Report {
  id      String   @id @default(uuid())
  issue   String
  date    DateTime
  time    String
  detail  String?
  venue   Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String
}

model City {
  name String @unique
  User User[]
}
